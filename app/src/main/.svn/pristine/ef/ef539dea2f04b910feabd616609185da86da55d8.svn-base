package com.fastwiki.com.socialhub.ui;

import android.app.Dialog;
import android.content.Context;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.fastwiki.com.socialhub.Globals;
import com.fastwiki.com.socialhub.R;
import com.fastwiki.com.socialhub.custom.CustomFragment;
import com.fastwiki.com.socialhub.model.ContactData;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.ArrayList;

public class Group extends CustomFragment
{
    private GetGroupJSON gj;
    String c_mode = "";
    ContactData c_contactData;

    public Group(){}

    public View onCreateView(LayoutInflater paramLayoutInflater, ViewGroup paramViewGroup, Bundle paramBundle)
    {
        View localView = paramLayoutInflater.inflate(R.layout.contact, null);
        final ListView localListView = (ListView)localView.findViewById(R.id.list);

        gj = new GetGroupJSON(getContext() , localListView);
        gj.execute("");

        localListView.setOnItemClickListener(new AdapterView.OnItemClickListener()
        {
            public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong)
            {
                Group.this.showProcessDialog(paramAnonymousInt);
                // 눌리웠을때 배경색을 변경시킨다.
                /*
                if (selected_contact != paramAnonymousInt){
                    paramAnonymousView.setBackgroundColor(Color.parseColor("#E0C7AF"));
                    localListView.getChildAt(selected_contact).setBackgroundColor(Color.parseColor("#FFFFFF"));
                    selected_contact = paramAnonymousInt;
                }*/
            }
        });
        setHasOptionsMenu(true);
        return localView;
    }

    public void showProcessDialog(int idx){

        final Dialog dlg = new Dialog(getContext());
        dlg.setContentView(R.layout.contact_dlg);

        if (idx != -1){
            c_mode = "Update";
            ContactData contactData = ((ContactData)gj.groupArrayList.get(idx));
            ((EditText)(dlg.findViewById(R.id.contactName))).setText(contactData.getContactName());
            ((EditText)(dlg.findViewById(R.id.contactMobileNo))).setText(contactData.getContactMobileNum());
            ((EditText)(dlg.findViewById(R.id.contactEmail))).setText(contactData.getContactEmail());
        }
        else{
            c_mode = "Add";
        }

        dlg.setTitle(c_mode+"Contact");
        Button btnAdd = (Button)dlg.findViewById(R.id.btnAdd);
        btnAdd.setText(c_mode);
        btnAdd.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 추가 및 수정동작을 진행한다.

                String contactName = ((EditText)(dlg.findViewById(R.id.contactName))).getText().toString();
                String contactMobileNo = ((EditText)(dlg.findViewById(R.id.contactMobileNo))).getText().toString();
                String contactEmail = ((EditText)(dlg.findViewById(R.id.contactEmail))).getText().toString();
                c_contactData = new ContactData(contactName,contactMobileNo,contactEmail);

                if(onProcess(c_mode , c_contactData) == true)
                    dlg.dismiss();
            }
        });
        dlg.show();
    }

    public boolean onProcess(String p_mode , ContactData p_contactData)
    {
        String ret_val = p_mode + "--" + p_contactData.getContactName() + "--" + p_contactData.getContactMobileNum() + "--" + p_contactData.getContactEmail();
        Toast.makeText(getContext() , ret_val , Toast.LENGTH_SHORT).show();

        //ProcessContact pc = new ProcessContact(p_mode , p_contactData);
        //pc.execute();
        return true;
    }

    public boolean onOptionsItemSelected(MenuItem paramMenuItem)
    {
        /*
        if (paramMenuItem.getItemId() == R.id.menu_search) {
            startActivity(new Intent(getActivity(), Search.class));
        }*/
        return super.onOptionsItemSelected(paramMenuItem);
    }

    class GroupAdapter extends BaseAdapter
    {
        private Context context;
        private ArrayList<ContactData> items;
        public GroupAdapter(Context paramContext, ArrayList<ContactData> paramArrayList)
        {
            this.context = paramContext;
            this.items = paramArrayList;
        }
        public int getCount()
        {
            return this.items.size();
        }
        public ContactData getItem(int paramInt)
        {
            return (ContactData)this.items.get(paramInt);
        }
        public long getItemId(int paramInt)
        {
            return paramInt;
        }

        public View getView(final int paramInt, View paramView, ViewGroup paramViewGroup)
        {
            if (paramView == null) {
                paramView = LayoutInflater.from(this.context).inflate(R.layout.contact_item, null);
            }
            ((TextView)paramView.findViewById(R.id.lbl1)).setText(getItem(paramInt).getContactName());
            ((TextView)paramView.findViewById(R.id.lbl2)).setText(getItem(paramInt).getContactMobileNum());
            ((TextView)paramView.findViewById(R.id.lbl3)).setText(getItem(paramInt).getContactEmail());
            return paramView;
        }
    }

    // 자료기지조작부분
    class ProcessContact extends AsyncTask<Void, Void, String> {

        Globals g = Globals.getInstance();
        private String c_mode;
        private ContactData c_contactData;

        ProcessContact(String p_mode, ContactData p_contactData) {
            this.c_mode = p_mode;
            this.c_contactData = p_contactData;
        }

        @Override
        protected String doInBackground(Void... params) {
            // TODO: attempt authentication against a network service.
            try {
                // Simulate network access.
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                //return false;
            }
            String link = "" , data = "" , result = "";
            BufferedReader bufferedReader;
            try {
                // 추가
                if (this.c_mode.equals("add")){
                    data = "?mode=add";
                    data += "&contactName=" + URLEncoder.encode(c_contactData.getContactName(), "UTF-8");
                    data += "&contactMobileNo=" + URLEncoder.encode(c_contactData.getContactMobileNum(), "UTF-8");
                    data += "&contactEmail=" + URLEncoder.encode(c_contactData.getContactEmail(), "UTF-8");
                }
                // 수정
                if (this.c_mode.equals("update")){
                    data = "?mode=update";
                    data += "&contactUid=" + URLEncoder.encode(c_contactData.getContactName(), "UTF-8");
                    data += "&contactName=" + URLEncoder.encode(c_contactData.getContactName(), "UTF-8");
                    data += "&contactMobileNo=" + URLEncoder.encode(c_contactData.getContactMobileNum(), "UTF-8");
                    data += "&contactEmail=" + URLEncoder.encode(c_contactData.getContactEmail(), "UTF-8");
                }
                // 삭제
                if (this.c_mode.equals("del")){
                    data = "?mode=delete";
                    data += "&contactUid=" + URLEncoder.encode(c_contactData.getContactName(), "UTF-8");
                }

                link = g.getMySiteUrl()+ "/login.php" + data;
                URL url = new URL(link);
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));
                result = bufferedReader.readLine();
                return result;
            } catch (Exception e) {
                return new String("Exception: " + e.getMessage());
            }
            // TODO: register the new account here.
        }

        @Override
        protected void onPostExecute(String result) {
            if (result.equals("yes")){

            }
        }
        @Override
        protected void onCancelled() {
        }
    }

    // 리스트내용을 읽어오는 부분
    class GetGroupJSON extends AsyncTask<String, Void, String> {

        Globals g = Globals.getInstance();
        private String myJSONString;
        private static final String JSON_ARRAY ="result";
        ArrayList groupArrayList = new ArrayList();
        private JSONArray retList = null;
        Context context;
        ListView listView;

        public GetGroupJSON(Context c , ListView v){
            context = c;
            listView = v;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
        }

        @Override
        protected String doInBackground(String... params) {
            BufferedReader bufferedReader = null;
            try {
                String uri = null;
                uri = g.getMySiteUrl()+"/readFromdb.php";;
                uri += "?mode=imageListInfo&sel_kind=2";
                URL url = new URL(uri);
                HttpURLConnection con = (HttpURLConnection) url.openConnection();
                StringBuilder sb = new StringBuilder();
                bufferedReader = new BufferedReader(new InputStreamReader(con.getInputStream()));
                String json;
                while((json = bufferedReader.readLine())!= null){sb.append(json+"\n");}
                return sb.toString().trim();

            }catch(Exception e){
                return new String("Exception: " + e.getMessage());
            }
        }

        @Override
        protected void onPostExecute(String s) {

            super.onPostExecute(s);
            myJSONString = "{'"+JSON_ARRAY+"':" + s + "}";
            try {
                JSONObject jsonObject = new JSONObject(myJSONString);
                retList = jsonObject.getJSONArray(JSON_ARRAY);
                JSONObject oneObj;
                groupArrayList.clear();
                for (int i = 0; i < retList.length(); i++)
                {
                    oneObj = retList.getJSONObject(i);
                    groupArrayList.add(new ContactData(oneObj.getString("uid") ,oneObj.getString("imgname") ,oneObj.getString("imgdesc")));
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
            listView.setAdapter(new GroupAdapter(context , groupArrayList));
        }
    }
}